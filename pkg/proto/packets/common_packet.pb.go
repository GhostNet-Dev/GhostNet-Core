// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: common_packet.proto

package packets

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PacketType int32

const (
	PacketType_GetGhostNetVersion PacketType = 0
	// master node packet type
	PacketType_NotificationMasterNode       PacketType = 1
	PacketType_NotificationMasterFriendNode PacketType = 2
	PacketType_ConnectToMasterNode          PacketType = 3
	PacketType_SearchGhostPubKey            PacketType = 4
	PacketType_RequestMasterNodeList        PacketType = 5
	PacketType_ResponseMasterNodeList       PacketType = 6
	PacketType_RequestMasterFriendNodeList  PacketType = 7
	PacketType_ResponseMasterFriendNodeList PacketType = 8
	PacketType_SearchMasterPubKey           PacketType = 9
	PacketType_SearchResultMasterPubKey     PacketType = 10
	PacketType_RegistBadBlock               PacketType = 11
	// blockchain packet type
	PacketType_GetHeightestBlock     PacketType = 12
	PacketType_NewBlock              PacketType = 13
	PacketType_GetBlock              PacketType = 14
	PacketType_SendBlock             PacketType = 15
	PacketType_ScanAddrBlock         PacketType = 16 // not used...
	PacketType_SendTransaction       PacketType = 17
	PacketType_SearchTransaction     PacketType = 18
	PacketType_SendDataTransaction   PacketType = 19
	PacketType_SearchDataTransaction PacketType = 20
	PacketType_ScanBlockChain        PacketType = 21
	PacketType_CheckGhostNickname    PacketType = 22
	PacketType_SendDataTxIdList      PacketType = 23
	PacketType_GetDataTxIdList       PacketType = 24
	PacketType_ReportBlockError      PacketType = 25
	PacketType_GetBlockHash          PacketType = 26
	PacketType_SendBockHash          PacketType = 27
	PacketType_GetBlockPrevHash      PacketType = 28
	PacketType_SendBlockPrevHash     PacketType = 29
	PacketType_GetTxStatus           PacketType = 30
	PacketType_SendTxStatus          PacketType = 31
)

// Enum value maps for PacketType.
var (
	PacketType_name = map[int32]string{
		0:  "GetGhostNetVersion",
		1:  "NotificationMasterNode",
		2:  "NotificationMasterFriendNode",
		3:  "ConnectToMasterNode",
		4:  "SearchGhostPubKey",
		5:  "RequestMasterNodeList",
		6:  "ResponseMasterNodeList",
		7:  "RequestMasterFriendNodeList",
		8:  "ResponseMasterFriendNodeList",
		9:  "SearchMasterPubKey",
		10: "SearchResultMasterPubKey",
		11: "RegistBadBlock",
		12: "GetHeightestBlock",
		13: "NewBlock",
		14: "GetBlock",
		15: "SendBlock",
		16: "ScanAddrBlock",
		17: "SendTransaction",
		18: "SearchTransaction",
		19: "SendDataTransaction",
		20: "SearchDataTransaction",
		21: "ScanBlockChain",
		22: "CheckGhostNickname",
		23: "SendDataTxIdList",
		24: "GetDataTxIdList",
		25: "ReportBlockError",
		26: "GetBlockHash",
		27: "SendBockHash",
		28: "GetBlockPrevHash",
		29: "SendBlockPrevHash",
		30: "GetTxStatus",
		31: "SendTxStatus",
	}
	PacketType_value = map[string]int32{
		"GetGhostNetVersion":           0,
		"NotificationMasterNode":       1,
		"NotificationMasterFriendNode": 2,
		"ConnectToMasterNode":          3,
		"SearchGhostPubKey":            4,
		"RequestMasterNodeList":        5,
		"ResponseMasterNodeList":       6,
		"RequestMasterFriendNodeList":  7,
		"ResponseMasterFriendNodeList": 8,
		"SearchMasterPubKey":           9,
		"SearchResultMasterPubKey":     10,
		"RegistBadBlock":               11,
		"GetHeightestBlock":            12,
		"NewBlock":                     13,
		"GetBlock":                     14,
		"SendBlock":                    15,
		"ScanAddrBlock":                16,
		"SendTransaction":              17,
		"SearchTransaction":            18,
		"SendDataTransaction":          19,
		"SearchDataTransaction":        20,
		"ScanBlockChain":               21,
		"CheckGhostNickname":           22,
		"SendDataTxIdList":             23,
		"GetDataTxIdList":              24,
		"ReportBlockError":             25,
		"GetBlockHash":                 26,
		"SendBockHash":                 27,
		"GetBlockPrevHash":             28,
		"SendBlockPrevHash":            29,
		"GetTxStatus":                  30,
		"SendTxStatus":                 31,
	}
)

func (x PacketType) Enum() *PacketType {
	p := new(PacketType)
	*p = x
	return p
}

func (x PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_packet_proto_enumTypes[0].Descriptor()
}

func (PacketType) Type() protoreflect.EnumType {
	return &file_common_packet_proto_enumTypes[0]
}

func (x PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketType.Descriptor instead.
func (PacketType) EnumDescriptor() ([]byte, []int) {
	return file_common_packet_proto_rawDescGZIP(), []int{0}
}

type RoutingType int32

const (
	RoutingType_None                  RoutingType = 0
	RoutingType_BroadCastingLevelZero RoutingType = 1
	RoutingType_BroadCasting          RoutingType = 2
	RoutingType_Flooding              RoutingType = 3
	RoutingType_SelectiveFlooding     RoutingType = 4
)

// Enum value maps for RoutingType.
var (
	RoutingType_name = map[int32]string{
		0: "None",
		1: "BroadCastingLevelZero",
		2: "BroadCasting",
		3: "Flooding",
		4: "SelectiveFlooding",
	}
	RoutingType_value = map[string]int32{
		"None":                  0,
		"BroadCastingLevelZero": 1,
		"BroadCasting":          2,
		"Flooding":              3,
		"SelectiveFlooding":     4,
	}
)

func (x RoutingType) Enum() *RoutingType {
	p := new(RoutingType)
	*p = x
	return p
}

func (x RoutingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_packet_proto_enumTypes[1].Descriptor()
}

func (RoutingType) Type() protoreflect.EnumType {
	return &file_common_packet_proto_enumTypes[1]
}

func (x RoutingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingType.Descriptor instead.
func (RoutingType) EnumDescriptor() ([]byte, []int) {
	return file_common_packet_proto_rawDescGZIP(), []int{1}
}

type GhostIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *GhostIp) Reset() {
	*x = GhostIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_packet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GhostIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GhostIp) ProtoMessage() {}

func (x *GhostIp) ProtoReflect() protoreflect.Message {
	mi := &file_common_packet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GhostIp.ProtoReflect.Descriptor instead.
func (*GhostIp) Descriptor() ([]byte, []int) {
	return file_common_packet_proto_rawDescGZIP(), []int{0}
}

func (x *GhostIp) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GhostIp) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type GhostUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterPubKey string `protobuf:"bytes,1,opt,name=MasterPubKey,proto3" json:"MasterPubKey,omitempty"`
	PubKey       string `protobuf:"bytes,2,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	Nickname     string `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
}

func (x *GhostUser) Reset() {
	*x = GhostUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_packet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GhostUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GhostUser) ProtoMessage() {}

func (x *GhostUser) ProtoReflect() protoreflect.Message {
	mi := &file_common_packet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GhostUser.ProtoReflect.Descriptor instead.
func (*GhostUser) Descriptor() ([]byte, []int) {
	return file_common_packet_proto_rawDescGZIP(), []int{1}
}

func (x *GhostUser) GetMasterPubKey() string {
	if x != nil {
		return x.MasterPubKey
	}
	return ""
}

func (x *GhostUser) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *GhostUser) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type Any struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       PacketType `protobuf:"varint,1,opt,name=Type,proto3,enum=ghostnet.packets.PacketType" json:"Type,omitempty"`
	PacketData []byte     `protobuf:"bytes,2,opt,name=PacketData,proto3" json:"PacketData,omitempty"`
}

func (x *Any) Reset() {
	*x = Any{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_packet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Any) ProtoMessage() {}

func (x *Any) ProtoReflect() protoreflect.Message {
	mi := &file_common_packet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Any.ProtoReflect.Descriptor instead.
func (*Any) Descriptor() ([]byte, []int) {
	return file_common_packet_proto_rawDescGZIP(), []int{2}
}

func (x *Any) GetType() PacketType {
	if x != nil {
		return x.Type
	}
	return PacketType_GetGhostNetVersion
}

func (x *Any) GetPacketData() []byte {
	if x != nil {
		return x.PacketData
	}
	return nil
}

type GhostPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPubKeyAddress string   `protobuf:"bytes,1,opt,name=FromPubKeyAddress,proto3" json:"FromPubKeyAddress,omitempty"`
	RequestId         uint32   `protobuf:"varint,2,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	ClientId          uint32   `protobuf:"varint,3,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	Source            *GhostIp `protobuf:"bytes,4,opt,name=Source,proto3" json:"Source,omitempty"`
	TimeId            uint64   `protobuf:"varint,5,opt,name=TimeId,proto3" json:"TimeId,omitempty"`
	SqFlag            bool     `protobuf:"varint,6,opt,name=SqFlag,proto3" json:"SqFlag,omitempty"`
}

func (x *GhostPacket) Reset() {
	*x = GhostPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_packet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GhostPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GhostPacket) ProtoMessage() {}

func (x *GhostPacket) ProtoReflect() protoreflect.Message {
	mi := &file_common_packet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GhostPacket.ProtoReflect.Descriptor instead.
func (*GhostPacket) Descriptor() ([]byte, []int) {
	return file_common_packet_proto_rawDescGZIP(), []int{3}
}

func (x *GhostPacket) GetFromPubKeyAddress() string {
	if x != nil {
		return x.FromPubKeyAddress
	}
	return ""
}

func (x *GhostPacket) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *GhostPacket) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *GhostPacket) GetSource() *GhostIp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *GhostPacket) GetTimeId() uint64 {
	if x != nil {
		return x.TimeId
	}
	return 0
}

func (x *GhostPacket) GetSqFlag() bool {
	if x != nil {
		return x.SqFlag
	}
	return false
}

type MasterPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common   *GhostPacket `protobuf:"bytes,1,opt,name=Common,proto3" json:"Common,omitempty"`
	RoutingT RoutingType  `protobuf:"varint,2,opt,name=RoutingT,proto3,enum=ghostnet.packets.RoutingType" json:"RoutingT,omitempty"`
	Level    uint32       `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (x *MasterPacket) Reset() {
	*x = MasterPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_packet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterPacket) ProtoMessage() {}

func (x *MasterPacket) ProtoReflect() protoreflect.Message {
	mi := &file_common_packet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterPacket.ProtoReflect.Descriptor instead.
func (*MasterPacket) Descriptor() ([]byte, []int) {
	return file_common_packet_proto_rawDescGZIP(), []int{4}
}

func (x *MasterPacket) GetCommon() *GhostPacket {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *MasterPacket) GetRoutingT() RoutingType {
	if x != nil {
		return x.RoutingT
	}
	return RoutingType_None
}

func (x *MasterPacket) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

var File_common_packet_proto protoreflect.FileDescriptor

var file_common_packet_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x07, 0x47, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x63, 0x0a, 0x09, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x03, 0x41,
	0x6e, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x01, 0x0a, 0x0b, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x47, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x71, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x71, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x96, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x35, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2a, 0xec, 0x05, 0x0a, 0x0a, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x68,
	0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x47, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x10, 0x09, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x10, 0x0a, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10,
	0x0b, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x78,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x78, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x18, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x10, 0x1c, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61,
	0x73, 0x68, 0x10, 0x1d, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x1f, 0x2a, 0x69, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x04, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x2d, 0x44, 0x65, 0x76, 0x2f, 0x47, 0x68,
	0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x2d, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_packet_proto_rawDescOnce sync.Once
	file_common_packet_proto_rawDescData = file_common_packet_proto_rawDesc
)

func file_common_packet_proto_rawDescGZIP() []byte {
	file_common_packet_proto_rawDescOnce.Do(func() {
		file_common_packet_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_packet_proto_rawDescData)
	})
	return file_common_packet_proto_rawDescData
}

var file_common_packet_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_common_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_common_packet_proto_goTypes = []interface{}{
	(PacketType)(0),      // 0: ghostnet.packets.PacketType
	(RoutingType)(0),     // 1: ghostnet.packets.RoutingType
	(*GhostIp)(nil),      // 2: ghostnet.packets.GhostIp
	(*GhostUser)(nil),    // 3: ghostnet.packets.GhostUser
	(*Any)(nil),          // 4: ghostnet.packets.Any
	(*GhostPacket)(nil),  // 5: ghostnet.packets.GhostPacket
	(*MasterPacket)(nil), // 6: ghostnet.packets.MasterPacket
}
var file_common_packet_proto_depIdxs = []int32{
	0, // 0: ghostnet.packets.Any.Type:type_name -> ghostnet.packets.PacketType
	2, // 1: ghostnet.packets.GhostPacket.Source:type_name -> ghostnet.packets.GhostIp
	5, // 2: ghostnet.packets.MasterPacket.Common:type_name -> ghostnet.packets.GhostPacket
	1, // 3: ghostnet.packets.MasterPacket.RoutingT:type_name -> ghostnet.packets.RoutingType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_common_packet_proto_init() }
func file_common_packet_proto_init() {
	if File_common_packet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_packet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GhostIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_packet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GhostUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_packet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Any); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_packet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GhostPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_packet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_packet_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_packet_proto_goTypes,
		DependencyIndexes: file_common_packet_proto_depIdxs,
		EnumInfos:         file_common_packet_proto_enumTypes,
		MessageInfos:      file_common_packet_proto_msgTypes,
	}.Build()
	File_common_packet_proto = out.File
	file_common_packet_proto_rawDesc = nil
	file_common_packet_proto_goTypes = nil
	file_common_packet_proto_depIdxs = nil
}
