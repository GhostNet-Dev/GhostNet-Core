// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: controls.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GApiClient is the client API for GApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GApiClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	CreateGenesis(ctx context.Context, in *CreateGenesisRequest, opts ...grpc.CallOption) (*CreateGenesisResponse, error)
	GetPrivateKey(ctx context.Context, in *PrivateKeyRequest, opts ...grpc.CallOption) (*PrivateKeyResponse, error)
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	ControlContainer(ctx context.Context, in *ControlContainerRequest, opts ...grpc.CallOption) (*ControlContainerResponse, error)
	ReleaseContainer(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error)
	GetLog(ctx context.Context, in *GetLogRequest, opts ...grpc.CallOption) (*GetLogResponse, error)
	CheckStatus(ctx context.Context, in *CoreStateRequest, opts ...grpc.CallOption) (*CoreStateResponse, error)
}

type gApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGApiClient(cc grpc.ClientConnInterface) GApiClient {
	return &gApiClient{cc}
}

func (c *gApiClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/ghostnet.rpc.GApi/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gApiClient) CreateGenesis(ctx context.Context, in *CreateGenesisRequest, opts ...grpc.CallOption) (*CreateGenesisResponse, error) {
	out := new(CreateGenesisResponse)
	err := c.cc.Invoke(ctx, "/ghostnet.rpc.GApi/CreateGenesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gApiClient) GetPrivateKey(ctx context.Context, in *PrivateKeyRequest, opts ...grpc.CallOption) (*PrivateKeyResponse, error) {
	out := new(PrivateKeyResponse)
	err := c.cc.Invoke(ctx, "/ghostnet.rpc.GApi/GetPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gApiClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	out := new(CreateContainerResponse)
	err := c.cc.Invoke(ctx, "/ghostnet.rpc.GApi/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gApiClient) ControlContainer(ctx context.Context, in *ControlContainerRequest, opts ...grpc.CallOption) (*ControlContainerResponse, error) {
	out := new(ControlContainerResponse)
	err := c.cc.Invoke(ctx, "/ghostnet.rpc.GApi/ControlContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gApiClient) ReleaseContainer(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	out := new(ReleaseResponse)
	err := c.cc.Invoke(ctx, "/ghostnet.rpc.GApi/ReleaseContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gApiClient) GetLog(ctx context.Context, in *GetLogRequest, opts ...grpc.CallOption) (*GetLogResponse, error) {
	out := new(GetLogResponse)
	err := c.cc.Invoke(ctx, "/ghostnet.rpc.GApi/GetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gApiClient) CheckStatus(ctx context.Context, in *CoreStateRequest, opts ...grpc.CallOption) (*CoreStateResponse, error) {
	out := new(CoreStateResponse)
	err := c.cc.Invoke(ctx, "/ghostnet.rpc.GApi/CheckStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GApiServer is the server API for GApi service.
// All implementations must embed UnimplementedGApiServer
// for forward compatibility
type GApiServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	CreateGenesis(context.Context, *CreateGenesisRequest) (*CreateGenesisResponse, error)
	GetPrivateKey(context.Context, *PrivateKeyRequest) (*PrivateKeyResponse, error)
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	ControlContainer(context.Context, *ControlContainerRequest) (*ControlContainerResponse, error)
	ReleaseContainer(context.Context, *ReleaseRequest) (*ReleaseResponse, error)
	GetLog(context.Context, *GetLogRequest) (*GetLogResponse, error)
	CheckStatus(context.Context, *CoreStateRequest) (*CoreStateResponse, error)
	mustEmbedUnimplementedGApiServer()
}

// UnimplementedGApiServer must be embedded to have forward compatible implementations.
type UnimplementedGApiServer struct {
}

func (UnimplementedGApiServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedGApiServer) CreateGenesis(context.Context, *CreateGenesisRequest) (*CreateGenesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesis not implemented")
}
func (UnimplementedGApiServer) GetPrivateKey(context.Context, *PrivateKeyRequest) (*PrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateKey not implemented")
}
func (UnimplementedGApiServer) CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (UnimplementedGApiServer) ControlContainer(context.Context, *ControlContainerRequest) (*ControlContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlContainer not implemented")
}
func (UnimplementedGApiServer) ReleaseContainer(context.Context, *ReleaseRequest) (*ReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseContainer not implemented")
}
func (UnimplementedGApiServer) GetLog(context.Context, *GetLogRequest) (*GetLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (UnimplementedGApiServer) CheckStatus(context.Context, *CoreStateRequest) (*CoreStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedGApiServer) mustEmbedUnimplementedGApiServer() {}

// UnsafeGApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GApiServer will
// result in compilation errors.
type UnsafeGApiServer interface {
	mustEmbedUnimplementedGApiServer()
}

func RegisterGApiServer(s grpc.ServiceRegistrar, srv GApiServer) {
	s.RegisterService(&GApi_ServiceDesc, srv)
}

func _GApi_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GApiServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghostnet.rpc.GApi/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GApiServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GApi_CreateGenesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GApiServer).CreateGenesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghostnet.rpc.GApi/CreateGenesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GApiServer).CreateGenesis(ctx, req.(*CreateGenesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GApi_GetPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GApiServer).GetPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghostnet.rpc.GApi/GetPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GApiServer).GetPrivateKey(ctx, req.(*PrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GApi_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GApiServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghostnet.rpc.GApi/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GApiServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GApi_ControlContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GApiServer).ControlContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghostnet.rpc.GApi/ControlContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GApiServer).ControlContainer(ctx, req.(*ControlContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GApi_ReleaseContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GApiServer).ReleaseContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghostnet.rpc.GApi/ReleaseContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GApiServer).ReleaseContainer(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GApi_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GApiServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghostnet.rpc.GApi/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GApiServer).GetLog(ctx, req.(*GetLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GApi_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GApiServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ghostnet.rpc.GApi/CheckStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GApiServer).CheckStatus(ctx, req.(*CoreStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GApi_ServiceDesc is the grpc.ServiceDesc for GApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ghostnet.rpc.GApi",
	HandlerType: (*GApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _GApi_CreateAccount_Handler,
		},
		{
			MethodName: "CreateGenesis",
			Handler:    _GApi_CreateGenesis_Handler,
		},
		{
			MethodName: "GetPrivateKey",
			Handler:    _GApi_GetPrivateKey_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _GApi_CreateContainer_Handler,
		},
		{
			MethodName: "ControlContainer",
			Handler:    _GApi_ControlContainer_Handler,
		},
		{
			MethodName: "ReleaseContainer",
			Handler:    _GApi_ReleaseContainer_Handler,
		},
		{
			MethodName: "GetLog",
			Handler:    _GApi_GetLog_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _GApi_CheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controls.proto",
}
