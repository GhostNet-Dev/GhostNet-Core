syntax = "proto3";
package ghostnet.rpc;
option go_package = "github.com/GhostNet-Dev/GhostNet-Core/pkg/proto/rpc";

import "block.proto";
import "user.proto";


service GApi {
    rpc CreateAccount (CreateAccountRequest) returns (CreateAccountResponse) {}
    rpc CreateGenesis (CreateGenesisRequest) returns (CreateGenesisResponse) {}
    rpc GetPrivateKey (PrivateKeyRequest) returns (PrivateKeyResponse) {}

    rpc LoginContainer (LoginRequest) returns (LoginResponse) {}
    rpc ForkContainer (ForkContainerRequest) returns (ForkContainerResponse) {}
    rpc CreateContainer (CreateContainerRequest) returns (CreateContainerResponse) {}
    rpc ControlContainer (ControlContainerRequest) returns (ControlContainerResponse) {}
    rpc ReleaseContainer (ReleaseRequest) returns (ReleaseResponse) {}
    rpc GetContainerList (GetContainerListRequest) returns (GetContainerListResponse) {}

    rpc GetLog (GetLogRequest) returns (GetLogResponse) {}
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse) {}
    rpc CheckStatus (CoreStateRequest) returns (CoreStateResponse) {}
    rpc GetAccount (GetAccountRequest) returns (GetAccountResponse) {}
    rpc GetBlockInfo (GetBlockInfoRequest) returns (GetBlockInfoResponse) {}
}

enum ContainerControlType {
    Reserved = 0;
    StartResume = 1;
    StopSuspend = 2;
}

message LoginRequest {
    uint32 Id = 1;
    string Ip = 2;
    string Port = 3;
    string Username = 4;
    bytes Password = 5;
}

message LoginResponse {
    bool Result = 1;
}

message GetBlockInfoRequest {
    uint32 Id = 1;
    uint32 BlockId = 2;
}
message GetBlockInfoResponse {
    uint32 Id = 1;
    uint32 BlockId = 2;
    ptypes.PairedBlocks Pair = 3;
}

message GetAccountRequest {
    uint32 Id = 1;
}
message GetAccountResponse {
    uint32 Id = 1;
    repeated ptypes.GhostUser User = 2;
}

message GetInfoRequest {}

message GetInfoResponse {
    uint32 totalContainer = 1;
}

message GetContainerListRequest {
    uint32 Id = 1;
}

message GetContainerListResponse{
    uint32 Id = 1;
    string PubKey = 2;
    ContainerControlType State = 3;
    string Username = 4;
    int32 PID = 5;
    string Port = 6;
    bytes Info = 7;
}

message ForkContainerRequest {
    string username = 1;
    bytes password = 2;
    string ip = 3;
    string port = 4;
}

message ForkContainerResponse { bool result = 1;}

message CreateContainerRequest {
    string username = 1;
    bytes password = 2;
    string ip = 3;
    string port = 4;
}

message CreateContainerResponse { bool result = 1;}
message CreateGenesisRequest { 
    uint32 id = 1; 
    bytes password = 2;
}

message CreateGenesisResponse { bool result = 1;}
message ControlContainerRequest { 
    uint32 id = 1; 
    ContainerControlType control = 2;
}

message ControlContainerResponse { bool result = 1;}
message ReleaseRequest { uint32 id = 1; }
message ReleaseResponse { bool result = 1; }
message GetLogRequest { uint32 id = 1;}
message GetLogResponse {
    bytes logbuf = 1;
}

message PrivateKeyRequest {
    uint32 id = 1; 
    string username = 2;
    bytes password = 3;
}

message PrivateKeyResponse {
    bool result = 1;
    bytes PrivateKey = 2;
}

message CreateAccountRequest {
    string username = 1;
    bytes password = 2;
}

message CreateAccountResponse {
    bool result = 1;
    string PubKeyAddress = 2;
}

message CoreStateRequest {
    uint32 id = 1;
}

message CoreStateResponse {
    uint32 state = 1;
}